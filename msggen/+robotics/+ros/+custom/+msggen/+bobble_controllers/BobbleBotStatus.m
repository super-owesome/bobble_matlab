classdef BobbleBotStatus < robotics.ros.Message
    %BobbleBotStatus MATLAB implementation of bobble_controllers/BobbleBotStatus
    %   This class was automatically generated by
    %   robotics.ros.msg.internal.gen.MessageClassGenerator.
    
    %   Copyright 2014-2019 The MathWorks, Inc.
    
    %#ok<*INUSD>
    
    properties (Constant)
        MessageType = 'bobble_controllers/BobbleBotStatus' % The ROS message type
    end
    
    properties (Constant, Hidden)
        MD5Checksum = 'b303cd7aa8f6ca41fca0052a5f67a8f4' % The MD5 Checksum of the message definition
    end
    
    properties (Access = protected)
        JavaMessage % The Java message object
    end
    
    properties (Dependent)
        ControlMode
        MeasuredTiltDot
        MeasuredTurnRate
        Tilt
        TiltRate
        Heading
        TurnRate
        ForwardVelocity
        DesiredVelocity
        DesiredTilt
        DesiredTurnRate
        LeftMotorPosition
        LeftMotorVelocity
        RightMotorPosition
        RightMotorVelocity
        TiltEffort
        HeadingEffort
        LeftMotorEffortCmd
        RightMotorEffortCmd
    end
    
    properties (Constant, Hidden)
        PropertyList = {'ControlMode', 'DesiredTilt', 'DesiredTurnRate', 'DesiredVelocity', 'ForwardVelocity', 'Heading', 'HeadingEffort', 'LeftMotorEffortCmd', 'LeftMotorPosition', 'LeftMotorVelocity', 'MeasuredTiltDot', 'MeasuredTurnRate', 'RightMotorEffortCmd', 'RightMotorPosition', 'RightMotorVelocity', 'Tilt', 'TiltEffort', 'TiltRate', 'TurnRate'} % List of non-constant message properties
        ROSPropertyList = {'ControlMode', 'DesiredTilt', 'DesiredTurnRate', 'DesiredVelocity', 'ForwardVelocity', 'Heading', 'HeadingEffort', 'LeftMotorEffortCmd', 'LeftMotorPosition', 'LeftMotorVelocity', 'MeasuredTiltDot', 'MeasuredTurnRate', 'RightMotorEffortCmd', 'RightMotorPosition', 'RightMotorVelocity', 'Tilt', 'TiltEffort', 'TiltRate', 'TurnRate'} % List of non-constant ROS message properties
    end
    
    methods
        function obj = BobbleBotStatus(msg)
            %BobbleBotStatus Construct the message object BobbleBotStatus
            import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
            
            % Support default constructor
            if nargin == 0
                obj.JavaMessage = obj.createNewJavaMessage;
                return;
            end
            
            % Construct appropriate empty array
            if isempty(msg)
                obj = obj.empty(0,1);
                return;
            end
            
            % Make scalar construction fast
            if isscalar(msg)
                % Check for correct input class
                if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
                    error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
                        char(MessageInfo.getType(msg(1))) ));
                end
                obj.JavaMessage = msg(1);
                return;
            end
            
            % Check that this is a vector of scalar messages. Since this
            % is an object array, use arrayfun to verify.
            if ~all(arrayfun(@isscalar, msg))
                error(message('robotics:ros:message:MessageArraySizeError'));
            end
            
            % Check that all messages in the array have the correct type
            if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
                error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
            end
            
            % Construct array of objects if necessary
            objType = class(obj);
            for i = 1:length(msg)
                obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
            end
        end
        
        function controlmode = get.ControlMode(obj)
            %get.ControlMode Get the value for property ControlMode
            controlmode = int32(obj.JavaMessage.getControlMode);
        end
        
        function set.ControlMode(obj, controlmode)
            %set.ControlMode Set the value for property ControlMode
            validateattributes(controlmode, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'ControlMode');
            
            obj.JavaMessage.setControlMode(controlmode);
        end
        
        function measuredtiltdot = get.MeasuredTiltDot(obj)
            %get.MeasuredTiltDot Get the value for property MeasuredTiltDot
            measuredtiltdot = single(obj.JavaMessage.getMeasuredTiltDot);
        end
        
        function set.MeasuredTiltDot(obj, measuredtiltdot)
            %set.MeasuredTiltDot Set the value for property MeasuredTiltDot
            validateattributes(measuredtiltdot, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'MeasuredTiltDot');
            
            obj.JavaMessage.setMeasuredTiltDot(measuredtiltdot);
        end
        
        function measuredturnrate = get.MeasuredTurnRate(obj)
            %get.MeasuredTurnRate Get the value for property MeasuredTurnRate
            measuredturnrate = single(obj.JavaMessage.getMeasuredTurnRate);
        end
        
        function set.MeasuredTurnRate(obj, measuredturnrate)
            %set.MeasuredTurnRate Set the value for property MeasuredTurnRate
            validateattributes(measuredturnrate, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'MeasuredTurnRate');
            
            obj.JavaMessage.setMeasuredTurnRate(measuredturnrate);
        end
        
        function tilt = get.Tilt(obj)
            %get.Tilt Get the value for property Tilt
            tilt = single(obj.JavaMessage.getTilt);
        end
        
        function set.Tilt(obj, tilt)
            %set.Tilt Set the value for property Tilt
            validateattributes(tilt, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'Tilt');
            
            obj.JavaMessage.setTilt(tilt);
        end
        
        function tiltrate = get.TiltRate(obj)
            %get.TiltRate Get the value for property TiltRate
            tiltrate = single(obj.JavaMessage.getTiltRate);
        end
        
        function set.TiltRate(obj, tiltrate)
            %set.TiltRate Set the value for property TiltRate
            validateattributes(tiltrate, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'TiltRate');
            
            obj.JavaMessage.setTiltRate(tiltrate);
        end
        
        function heading = get.Heading(obj)
            %get.Heading Get the value for property Heading
            heading = single(obj.JavaMessage.getHeading);
        end
        
        function set.Heading(obj, heading)
            %set.Heading Set the value for property Heading
            validateattributes(heading, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'Heading');
            
            obj.JavaMessage.setHeading(heading);
        end
        
        function turnrate = get.TurnRate(obj)
            %get.TurnRate Get the value for property TurnRate
            turnrate = single(obj.JavaMessage.getTurnRate);
        end
        
        function set.TurnRate(obj, turnrate)
            %set.TurnRate Set the value for property TurnRate
            validateattributes(turnrate, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'TurnRate');
            
            obj.JavaMessage.setTurnRate(turnrate);
        end
        
        function forwardvelocity = get.ForwardVelocity(obj)
            %get.ForwardVelocity Get the value for property ForwardVelocity
            forwardvelocity = single(obj.JavaMessage.getForwardVelocity);
        end
        
        function set.ForwardVelocity(obj, forwardvelocity)
            %set.ForwardVelocity Set the value for property ForwardVelocity
            validateattributes(forwardvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'ForwardVelocity');
            
            obj.JavaMessage.setForwardVelocity(forwardvelocity);
        end
        
        function desiredvelocity = get.DesiredVelocity(obj)
            %get.DesiredVelocity Get the value for property DesiredVelocity
            desiredvelocity = single(obj.JavaMessage.getDesiredVelocity);
        end
        
        function set.DesiredVelocity(obj, desiredvelocity)
            %set.DesiredVelocity Set the value for property DesiredVelocity
            validateattributes(desiredvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'DesiredVelocity');
            
            obj.JavaMessage.setDesiredVelocity(desiredvelocity);
        end
        
        function desiredtilt = get.DesiredTilt(obj)
            %get.DesiredTilt Get the value for property DesiredTilt
            desiredtilt = single(obj.JavaMessage.getDesiredTilt);
        end
        
        function set.DesiredTilt(obj, desiredtilt)
            %set.DesiredTilt Set the value for property DesiredTilt
            validateattributes(desiredtilt, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'DesiredTilt');
            
            obj.JavaMessage.setDesiredTilt(desiredtilt);
        end
        
        function desiredturnrate = get.DesiredTurnRate(obj)
            %get.DesiredTurnRate Get the value for property DesiredTurnRate
            desiredturnrate = single(obj.JavaMessage.getDesiredTurnRate);
        end
        
        function set.DesiredTurnRate(obj, desiredturnrate)
            %set.DesiredTurnRate Set the value for property DesiredTurnRate
            validateattributes(desiredturnrate, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'DesiredTurnRate');
            
            obj.JavaMessage.setDesiredTurnRate(desiredturnrate);
        end
        
        function leftmotorposition = get.LeftMotorPosition(obj)
            %get.LeftMotorPosition Get the value for property LeftMotorPosition
            leftmotorposition = single(obj.JavaMessage.getLeftMotorPosition);
        end
        
        function set.LeftMotorPosition(obj, leftmotorposition)
            %set.LeftMotorPosition Set the value for property LeftMotorPosition
            validateattributes(leftmotorposition, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'LeftMotorPosition');
            
            obj.JavaMessage.setLeftMotorPosition(leftmotorposition);
        end
        
        function leftmotorvelocity = get.LeftMotorVelocity(obj)
            %get.LeftMotorVelocity Get the value for property LeftMotorVelocity
            leftmotorvelocity = single(obj.JavaMessage.getLeftMotorVelocity);
        end
        
        function set.LeftMotorVelocity(obj, leftmotorvelocity)
            %set.LeftMotorVelocity Set the value for property LeftMotorVelocity
            validateattributes(leftmotorvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'LeftMotorVelocity');
            
            obj.JavaMessage.setLeftMotorVelocity(leftmotorvelocity);
        end
        
        function rightmotorposition = get.RightMotorPosition(obj)
            %get.RightMotorPosition Get the value for property RightMotorPosition
            rightmotorposition = single(obj.JavaMessage.getRightMotorPosition);
        end
        
        function set.RightMotorPosition(obj, rightmotorposition)
            %set.RightMotorPosition Set the value for property RightMotorPosition
            validateattributes(rightmotorposition, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'RightMotorPosition');
            
            obj.JavaMessage.setRightMotorPosition(rightmotorposition);
        end
        
        function rightmotorvelocity = get.RightMotorVelocity(obj)
            %get.RightMotorVelocity Get the value for property RightMotorVelocity
            rightmotorvelocity = single(obj.JavaMessage.getRightMotorVelocity);
        end
        
        function set.RightMotorVelocity(obj, rightmotorvelocity)
            %set.RightMotorVelocity Set the value for property RightMotorVelocity
            validateattributes(rightmotorvelocity, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'RightMotorVelocity');
            
            obj.JavaMessage.setRightMotorVelocity(rightmotorvelocity);
        end
        
        function tilteffort = get.TiltEffort(obj)
            %get.TiltEffort Get the value for property TiltEffort
            tilteffort = single(obj.JavaMessage.getTiltEffort);
        end
        
        function set.TiltEffort(obj, tilteffort)
            %set.TiltEffort Set the value for property TiltEffort
            validateattributes(tilteffort, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'TiltEffort');
            
            obj.JavaMessage.setTiltEffort(tilteffort);
        end
        
        function headingeffort = get.HeadingEffort(obj)
            %get.HeadingEffort Get the value for property HeadingEffort
            headingeffort = single(obj.JavaMessage.getHeadingEffort);
        end
        
        function set.HeadingEffort(obj, headingeffort)
            %set.HeadingEffort Set the value for property HeadingEffort
            validateattributes(headingeffort, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'HeadingEffort');
            
            obj.JavaMessage.setHeadingEffort(headingeffort);
        end
        
        function leftmotoreffortcmd = get.LeftMotorEffortCmd(obj)
            %get.LeftMotorEffortCmd Get the value for property LeftMotorEffortCmd
            leftmotoreffortcmd = single(obj.JavaMessage.getLeftMotorEffortCmd);
        end
        
        function set.LeftMotorEffortCmd(obj, leftmotoreffortcmd)
            %set.LeftMotorEffortCmd Set the value for property LeftMotorEffortCmd
            validateattributes(leftmotoreffortcmd, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'LeftMotorEffortCmd');
            
            obj.JavaMessage.setLeftMotorEffortCmd(leftmotoreffortcmd);
        end
        
        function rightmotoreffortcmd = get.RightMotorEffortCmd(obj)
            %get.RightMotorEffortCmd Get the value for property RightMotorEffortCmd
            rightmotoreffortcmd = single(obj.JavaMessage.getRightMotorEffortCmd);
        end
        
        function set.RightMotorEffortCmd(obj, rightmotoreffortcmd)
            %set.RightMotorEffortCmd Set the value for property RightMotorEffortCmd
            validateattributes(rightmotoreffortcmd, {'numeric'}, {'nonempty', 'scalar'}, 'BobbleBotStatus', 'RightMotorEffortCmd');
            
            obj.JavaMessage.setRightMotorEffortCmd(rightmotoreffortcmd);
        end
    end
    
    methods (Access = protected)
        function cpObj = copyElement(obj)
            %copyElement Implements deep copy behavior for message
            
            % Call default copy method for shallow copy
            cpObj = copyElement@robotics.ros.Message(obj);
            
            % Create a new Java message object
            cpObj.JavaMessage = obj.createNewJavaMessage;
            
            % Iterate over all primitive properties
            cpObj.ControlMode = obj.ControlMode;
            cpObj.MeasuredTiltDot = obj.MeasuredTiltDot;
            cpObj.MeasuredTurnRate = obj.MeasuredTurnRate;
            cpObj.Tilt = obj.Tilt;
            cpObj.TiltRate = obj.TiltRate;
            cpObj.Heading = obj.Heading;
            cpObj.TurnRate = obj.TurnRate;
            cpObj.ForwardVelocity = obj.ForwardVelocity;
            cpObj.DesiredVelocity = obj.DesiredVelocity;
            cpObj.DesiredTilt = obj.DesiredTilt;
            cpObj.DesiredTurnRate = obj.DesiredTurnRate;
            cpObj.LeftMotorPosition = obj.LeftMotorPosition;
            cpObj.LeftMotorVelocity = obj.LeftMotorVelocity;
            cpObj.RightMotorPosition = obj.RightMotorPosition;
            cpObj.RightMotorVelocity = obj.RightMotorVelocity;
            cpObj.TiltEffort = obj.TiltEffort;
            cpObj.HeadingEffort = obj.HeadingEffort;
            cpObj.LeftMotorEffortCmd = obj.LeftMotorEffortCmd;
            cpObj.RightMotorEffortCmd = obj.RightMotorEffortCmd;
        end
        
        function reload(obj, strObj)
            %reload Called by loadobj to assign properties
            obj.ControlMode = strObj.ControlMode;
            obj.MeasuredTiltDot = strObj.MeasuredTiltDot;
            obj.MeasuredTurnRate = strObj.MeasuredTurnRate;
            obj.Tilt = strObj.Tilt;
            obj.TiltRate = strObj.TiltRate;
            obj.Heading = strObj.Heading;
            obj.TurnRate = strObj.TurnRate;
            obj.ForwardVelocity = strObj.ForwardVelocity;
            obj.DesiredVelocity = strObj.DesiredVelocity;
            obj.DesiredTilt = strObj.DesiredTilt;
            obj.DesiredTurnRate = strObj.DesiredTurnRate;
            obj.LeftMotorPosition = strObj.LeftMotorPosition;
            obj.LeftMotorVelocity = strObj.LeftMotorVelocity;
            obj.RightMotorPosition = strObj.RightMotorPosition;
            obj.RightMotorVelocity = strObj.RightMotorVelocity;
            obj.TiltEffort = strObj.TiltEffort;
            obj.HeadingEffort = strObj.HeadingEffort;
            obj.LeftMotorEffortCmd = strObj.LeftMotorEffortCmd;
            obj.RightMotorEffortCmd = strObj.RightMotorEffortCmd;
        end
    end
    
    methods (Access = ?robotics.ros.Message)
        function strObj = saveobj(obj)
            %saveobj Implements saving of message to MAT file
            
            % Return an empty element if object array is empty
            if isempty(obj)
                strObj = struct.empty;
                return
            end
            
            strObj.ControlMode = obj.ControlMode;
            strObj.MeasuredTiltDot = obj.MeasuredTiltDot;
            strObj.MeasuredTurnRate = obj.MeasuredTurnRate;
            strObj.Tilt = obj.Tilt;
            strObj.TiltRate = obj.TiltRate;
            strObj.Heading = obj.Heading;
            strObj.TurnRate = obj.TurnRate;
            strObj.ForwardVelocity = obj.ForwardVelocity;
            strObj.DesiredVelocity = obj.DesiredVelocity;
            strObj.DesiredTilt = obj.DesiredTilt;
            strObj.DesiredTurnRate = obj.DesiredTurnRate;
            strObj.LeftMotorPosition = obj.LeftMotorPosition;
            strObj.LeftMotorVelocity = obj.LeftMotorVelocity;
            strObj.RightMotorPosition = obj.RightMotorPosition;
            strObj.RightMotorVelocity = obj.RightMotorVelocity;
            strObj.TiltEffort = obj.TiltEffort;
            strObj.HeadingEffort = obj.HeadingEffort;
            strObj.LeftMotorEffortCmd = obj.LeftMotorEffortCmd;
            strObj.RightMotorEffortCmd = obj.RightMotorEffortCmd;
        end
    end
    
    methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
        function obj = loadobj(strObj)
            %loadobj Implements loading of message from MAT file
            
            % Return an empty object array if the structure element is not defined
            if isempty(strObj)
                obj = robotics.ros.custom.msggen.bobble_controllers.BobbleBotStatus.empty(0,1);
                return
            end
            
            % Create an empty message object
            obj = robotics.ros.custom.msggen.bobble_controllers.BobbleBotStatus;
            obj.reload(strObj);
        end
    end
end
